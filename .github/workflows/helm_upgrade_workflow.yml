name: Push docker image to GCR reusable workflow

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      namespace_name:
        required: true
        type: string
      values_file:
        required: true
        type: string
      env_file:
        required: true
        type: string
      image_tag:
        required: false
        type: string
    secrets:
      gcp_token:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
jobs:
  deploy:
    name: Upgrade helm chart
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Setup GKE cluster
        uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
        with:
          cluster_name: web-devs
          location: us-central1
          credentials: ${{ secrets.gcp_token }}
      - name: Helm tool installer
        uses: Azure/setup-helm@v2.0
      - name: Download starkware-third-party repo from S3.
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2
        run: |
          helm plugin install https://starkware-third-party.s3.us-east-2.amazonaws.com/k8s/helm-s3/helm-s3-v0.9.2.tar.gz
          helm repo add starkware s3://starkware-third-party/helm-repo/charts
          helm repo update
      - name: Set image tag
        id: get_image_tag
        run: echo "::set-output name=tag::${{ inputs.image_tag || github.ref_name }}"
      - name: Upgrade using helm upgrade command.
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: us-east-2
        run: |
          helm upgrade ${{ inputs.app_name }} starkware/webapp-general-helm \
          --install \
          --namespace=${{ inputs.namespace_name }} \
          --values ${{ inputs.values_file }} \
          --set-file configMap.frontend.envs=${{ inputs.env_file }} \
          --set frontend.image.tag=${{ steps.get_image_tag.outputs.tag }}
